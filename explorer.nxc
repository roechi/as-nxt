#include "defines.h"
#include "a_star_algorithm.h"
#include "stack.h"
// #include "current_state.h"
// #include "a_star_algorithm.h"
#include "explorer.h"
#include "movement.h"
#include "map_drawing.h"
#include "serialize.h"

const int CHUNK_SIZE = 25;
const int RECEIVING_MAILBOX = MAILBOX1;

const int X_DIM = 8;
const int Y_DIM = 8;
    
void initMap(char & in[][], int x_dim, int y_dim);
void sendMap(char & map[][], int x_dim, int y_dim);
void BTWait();



// +++ TASK FLAGS ++
bool EXPLORE = true;

// Define motor mutexes for synchronization
mutex drive_motors;
// +++ METHODS ++
// +++ Initialization +++


/* 
 *  Initializes MOVE_SPACE (MAP_DIM_X x MAP_DIM_Y) with FREE ('F')
 */
void init_MoveSpace() {
    for (int x = 0; x < MAP_DIM_X; x++) {
        for (int y = 0; y < MAP_DIM_Y; y++) {
            MOVE_SPACE[x][y] = FREE;
        }
    }
}

bool is_MoveSpace_explored()
{
	bool is_explored = true;
    for (int x = 0; x < MAP_DIM_X && is_explored; x++) {
        for (int y = 0; y < MAP_DIM_Y && is_explored; y++) {
            if (MOVE_SPACE[x][y] == FREE)
				is_explored = false;
        }
    }
	
	return is_explored;
}

/*
 *  Initializes current_state to given x, y and direction.
 *  If the given values are not valid, defaults are used.
 */
void init_current_state(char x, char y, char direction) {
    current_state.pos_x = (x < MAP_DIM_X) ? x : 0;
    current_state.pos_y = (y < MAP_DIM_Y) ? y : 0;
    current_state.direction = (direction >= NORTH && direction <= WEST) ? direction : NORTH;

	stack_init();
	
	// Add start position to stack
	Position tmp;
	tmp.x = current_state.pos_x;
	tmp.y = current_state.pos_y;
	
	MOVE_SPACE[current_state.pos_x][current_state.pos_y] = EXPLORED;
		
	stack_push(tmp);
}

void init_ground_detectors() {
    SetSensorColorFull(GROUND_DETECTOR_RGB);
    //SetSensorColorFull(GROUND_DETECTOR_LIGHT); ???
    
	SetSensorLight(GROUND_DETECTOR_LIGHT);
    NORMAL_GROUND_COLOR = Sensor(GROUND_DETECTOR_LIGHT);
}

// +++ Explorer logic +++

void doStuff() {
    TextOut(0, LCD_LINE3, "Stack length: " + NumToStr(stack_length()));
	if (stack_length() == 0 || is_MoveSpace_explored())
	{
		EXPLORE = false;
        TextOut(0, LCD_LINE3, "All explored");
        Wait(500);
		return;
	}
	
	//ClearScreen();
	//TextOut(0, LCD_LINE1, "Ich bin: ");
	//NumOut(0, LCD_LINE2, current_state.pos_x);
	//NumOut(10, LCD_LINE2, current_state.pos_y);
	

    if(can_move(current_state.direction))   //move in current direction
    {
        move();
    }
    else if(find_new_direction() != -1)     //reorient
    {
        reorient();
    }
    else                                    //go back
    {
		// TextOut(0, LCD_LINE1, "Vor Pop");
		// Wait(2000);
	
		// ClearScreen();
        //TMP TODO: no clean solution
        Position current = stack_pop();
		// TextOut(0, LCD_LINE1, "Pop Ok:");
		
        Position target = get_top();
		
		//TextOut(0, LCD_LINE4, "Zurueck nach: ");
		//NumOut(0, LCD_LINE5, target.x);
		//NumOut(10, LCD_LINE5, target.y);
		//Wait(1000);
		
		//TextOut(0, LCD_LINE6, "Stack: ");
		//NumOut(0, LCD_LINE7, current.x);
		//NumOut(10, LCD_LINE7, current.y);
		
		
		if (current.x == -1)
			return;
		
        //move to target
        move_to_target(current, target);
		// TextOut(0, LCD_LINE3, "After Move To");
		// Wait(1000);
    }
}

void go_to_start()
{
	if (current_state.pos_x == -1 || current_state.pos_y == -1)
		return;

	A_Star_Position current_pos;	// Start is 0/0
	current_pos.x = current_state.pos_x;
	current_pos.y = current_state.pos_y;

	A_Star_Position target_pos;	// Start is 0/0
	target_pos.x = 0;
	target_pos.y = 0;
	
	a_star_calculate_path(current_pos, target_pos, MOVE_SPACE, MAP_DIM_X, MAP_DIM_Y);
	
	int a_star_iter = a_star_start_at;
	while(a_star_iter > -1)
	{
		A_Star_Node node = a_star_reversed_path[a_star_iter--];
		Position t; 
		t.x = node.pos.x;
		t.y = node.pos.y;
		
		Position p; 
		p.x = current_state.pos_x;
		p.y = current_state.pos_y;
		
		move_to_target(p, t);
	}
	
	// Position is 0/0
	
	Position start_pos; 
	start_pos.x = current_state.pos_x;	// or 0
	start_pos.y = current_state.pos_y;	// or 0
	
	Position outer_pos;	// target is -1/0
	outer_pos.x = -1;
	outer_pos.y = 0;
		
	move_to_target(start_pos, outer_pos);
}

/*
 *  Searches for new possible directions. If no new way is possible
 *  nothing happens! Otherwise direction of current_state is updated and
 *  the robot will rotate.
 *
 *  TODO: find clean solution if there is no new direction
 */
void reorient() {
    char new_direction = find_new_direction(); //-1 is possible

	if (new_direction >= 0)
		turn_to_direction(current_state.direction, new_direction);
}

/*
 *  Returns the value of the field next to the current
 *  position into the given direction.
 */
char get_field_in_direction(char direction) {
    char pos_area_x = current_state.pos_x;
    char pos_area_y = current_state.pos_y;
    switch (direction) {
        case NORTH: pos_area_y += 1;
                    break;
        case EAST:  pos_area_x += 1;
                    break;
        case SOUTH: pos_area_y += -1;
                    break;
        case WEST:  pos_area_x += -1;
                    break;
        default: ;
    }

    char field_value;

    if (
                (pos_area_x > MAP_DIM_X - 1) ||
                (pos_area_x < 0) ||
                (pos_area_y > MAP_DIM_Y - 1) ||
                (pos_area_y <0)
            ) {
        field_value = BORDER;
    } else {
        field_value = MOVE_SPACE[pos_area_x][pos_area_y];
    }

    return field_value;
}

/*
 *  Checks wether the current position + 
 *  one step to the given direction would result in a 
 *  valid position (FREE, TARGET, EXPLORED) (true is returned), or a 
 *  blocked position (OCCUPIED, BORDER) (false is returned).
 */
bool can_move(short direction) {
    short pos_new_x = current_state.pos_x;
    short pos_new_y = current_state.pos_y;

    switch (direction) {
        case NORTH: pos_new_y += 1;
                    break;
        case EAST:  pos_new_x += 1;
                    break;
        case SOUTH: pos_new_y += -1;
                    break;
        case WEST:  pos_new_x += -1;
                    break;
        default: ;
    }

    bool result = true;

    if (
            (pos_new_x > MAP_DIM_X - 1) ||
            (pos_new_x < 0) ||
            (pos_new_y > MAP_DIM_Y - 1) ||
            (pos_new_y < 0)
        ) {
        result = false;
    } else {
        if (MOVE_SPACE[pos_new_x][pos_new_y] == OCCUPIED || MOVE_SPACE[pos_new_x][pos_new_y] == EXPLORED) {
            result = false;
        }
    }

    return result;
}

bool is_target_field() {
    return get_ground_color() == INPUT_GREENCOLOR;
}

/*
 *  Explorer-Robot moves in current direction.
 *  If the field is OCCUPIED, it will be marked (as OCCUPIED) in the MOVE_SPACE 
 *  and the the robot will go back. Reoriantation follows.
 *  If the field is FREE, the field will marked (as EXPLORED) in the MOVE_SPACE
 *  and the robot will go to this position.
 */
void move() {
    drive(TILE_SIZE, MOVE_FORWARD);
    if (is_target_field()) {
        update_current_position(current_state.direction);
        MOVE_SPACE[current_state.pos_x][current_state.pos_y] = TARGET;
        TextOut(0, LCD_LINE8, "Target found! :)");
		Wait(500);
				
		Position tmp;
		tmp.x = current_state.pos_x;
		tmp.y = current_state.pos_y;
		stack_push(tmp);
		
		//ClearScreen();
		//TextOut(8, LCD_LINE1, "Pushe: ");
		//NumOut(0, LCD_LINE2, tmp.x);
		//NumOut(10, LCD_LINE2, tmp.y);
		//Wait(1000);
		
    } else if (is_occupied()) {
        update_current_position(current_state.direction);
        MOVE_SPACE[current_state.pos_x][current_state.pos_y] = OCCUPIED;
        drive(TILE_SIZE, MOVE_BACKWARD);
        update_current_position((current_state.direction + 2) % 4);
    } else {
		update_current_position(current_state.direction);
		MOVE_SPACE[current_state.pos_x][current_state.pos_y] = EXPLORED;
		
		Position tmp;
		tmp.x = current_state.pos_x;
		tmp.y = current_state.pos_y;
		
		//ClearScreen();
		//TextOut(8, LCD_LINE1, "Pushe: ");
		//NumOut(0, LCD_LINE2, tmp.x);
		//NumOut(10, LCD_LINE2, tmp.y);
		//Wait(1000);
		
		stack_push(tmp);
	}
}

/*
 *  Looks at each direction (turning right from the current direction).
 *  If a FREE field is found this direction is returned.

 *  TODO: - If no FREE field is found we are running into an error! (-1 will be returned!)
 *        - A*-Algorithm?!  
*/
char find_new_direction() {
    char newDirection = current_state.direction;
    bool found = false;
    char counter = 0;
    while (!found) {
        newDirection = (newDirection + 1) % 4;
        if (get_field_in_direction(newDirection) == FREE) {
            found = true;
        }
        // All directions checked + nothing FREE
        if(counter == 4) {
            //return Error value
            newDirection = -1;
            found = true;
        }
        ++counter;
    }
    return newDirection; 
}

/*
 *  Checks if the Ground is occupied.
 */
bool is_occupied() {
    return check_ground();
}

/**
*   Return an int value representing the color of the ground. 
*   Returns color black if read operation resulted in an error.
*/
int get_ground_color() {
    SetSensorColorFull(GROUND_DETECTOR_RGB);
    ColorSensorReadType csr;
    csr.Port = GROUND_DETECTOR_RGB;
    SysColorSensorRead(csr);
    if (csr.Result == NO_ERR) {
        return csr.ColorValue;
    } else {
        return INPUT_BLACKCOLOR;                    
    }
}

/*
 *  Checks if the current ground color differs from the init value.
 */
bool check_ground() {
	SetSensorLight(GROUND_DETECTOR_LIGHT);

    return !(abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_LIGHT)) < LIGHT_THRESHOLD);
}


void sendMap(char & map[][], int x_dim, int y_dim) {
    string msg = serialize(map);
    int last_chunk = SizeOf(map) % CHUNK_SIZE;
    int num_of_chunks = (SizeOf(map) - last_chunk) / CHUNK_SIZE;  

    string header = createHeader(x_dim, y_dim, CHUNK_SIZE);
    SendRemoteString(1, 0, header);
    BTWait();

    for (int i = 0; i < num_of_chunks; i++)
    {
        string chunk = SubStr(msg, i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);
        SendRemoteString(1, 0, chunk);

        BTWait();
    }
    string chunk = SubStr(msg, num_of_chunks * CHUNK_SIZE, SizeOf(map));
    SendRemoteString(1, 0, chunk);
    BTWait();
    
    string fin = createFinMessage();
    SendRemoteString(1, 0, fin);
    BTWait();    
} 

void initMap(char & in[][], int x_dim, int y_dim) {
    for (int x = 0; x < x_dim; x++) {
        for (int y = 0; y < y_dim; y++) {
            in[x][y] = 'O';
        }
    }
}

void BTWait (){
    bool temp = false; 
    until(ReceiveRemoteBool(RECEIVING_MAILBOX, true, temp) == NO_ERR);
}

void send()
{
    TextOut(0, LCD_LINE1, StrCat("BT Status: ", NumToStr(BluetoothStatus(CONN_BT1))));
    NumOut(0, LCD_LINE2, NO_ERR);
    
    BTWait();
    TextOut(0, 0, "begin");

    sendMap(MOVE_SPACE, X_DIM, Y_DIM);
}

// +++ TASKS +++

task main() {
    init_ground_detectors();
    PlaySound(SOUND_UP);
}

task explore() {
    Follows (main);
    //init movespace and position and direction of explorer-robot
    init_MoveSpace();
    init_current_state(0, 0, NORTH);
	
    while(EXPLORE) {
        //Method Explorer
		doStuff();
    }
	
	go_to_start();

	ClearScreen();
	TextOut(0, LCD_LINE1, "Fertig");
	Wait(2000);
    //try to draw Map on Screen
    
    drawMap(MOVE_SPACE, MAP_DIM_X, MAP_DIM_Y);

	// Senden
    send();

    PlaySound(SOUND_DOWN);
    //drive_away();
}


task stopOnTouch() 
{
    Follows (main);
    SetSensorTouch(TOUCH_SENSOR);
    
    while (true)
    {
        if (Sensor(TOUCH_SENSOR))
        {
            Acquire(drive_motors);
            stopMove();
            Stop(true);
        }
    }
}

