// +++ ROBOT CONSTANTS ***

#define RIGHT OUT_C
#define LEFT OUT_B
#define BOTH_DRIVE OUT_BC
#define NECK OUT_A
#define GROUND_DETECTOR_L IN_2
#define GROUND_DETECTOR_R IN_3
#define TOUCH IN_1
#define ULTRA IN_4
#define DIRECTION_RIGHT -1
#define DIRECTION_LEFT 1
#define DIRECTION_BACK 0
#define NECK_ROT_SPEED 50
#define SPEED 75
#define MAX_US_DISTANCE 25
#define LIGHT_THRESHOLD 15

// +++ NAVIGATION +++

const short MAP_DIMENSION = 3;
const char FREE = 'F';
const char OCCUPIED = 'C';
const char TARGET = 'T';
const char EXPLORED = 'E';
const short NORTH = 0;
const short EAST = 1;
const short SOUTH = 2;
const short WEST = 3;
const short GOAL = 4;

char MOVE_SPACE[MAP_DIMENSION][MAP_DIMENSION];

short POS_X = 0;
short POS_Y = 0;
short CURRENT_DIRECTION = NORTH;

int NORMAL_GROUND_COLOR = 0;

// +++ TASK FLAGS ++

bool EXPLORE = true;

// +++ METHODS ++

void initMoveSpace();
void exploreNextSector(short direction);
short move(short direction);
bool isOccupied();
short backOff();
short findNewDirection();
void rotateOnSpot(int direction, float wheelDistance, float wheelRadius, int angle);
void moveForward(long speed);
void backForward(long speed);
void stopMove();
void rotate90(int direction);
void turnRight();
void turnLeft();
void turnAround();
bool checkGround();
void initGroundDetectors();

void initMoveSpace() {
    for (int x = 0; x < MAP_DIMENSION; x++) {
        for (int y = 0; y < MAP_DIMENSION; y++) {
            MOVE_SPACE[x][y] = FREE;
        }
    }
}


void exploreNextSector(short direction) {
    move(direction);
}

void updateCurrentPosition(short direction) {
    switch (direction) {
        case NORTH: POS_Y += 1;
        case EAST: POS_X += 1;
        case SOUTH: POS_Y += -1;
        case WEST: POS_X += -1;
        default: ;
    }
}

void reorient() {
    short NEW_DIRECTION = findNewDirection();
            if (NEW_DIRECTION > CURRENT_DIRECTION) {
                turnRight();
            } else {
                turnLeft();
            }
            CURRENT_DIRECTION = NEW_DIRECTION;
}

bool canMove(short direction) {
    short pos_new_x = 0;
    short pos_new_y = 0;

    switch (direction) {
        case NORTH: pos_new_y += 1;
        case EAST: pos_new_x += 1;
        case SOUTH: pos_new_y += -1;
        case WEST: pos_new_x += -1;
        default: ;
    }

    bool result = true;

    if (MOVE_SPACE[pos_new_x][pos_new_y] == OCCUPIED) {
        result = false;
    } else {

        if (
                (pos_new_x > MAP_DIMENSION -1) ||
                (pos_new_x < 0) ||
                (pos_new_y > MAP_DIMENSION) ||
                (pos_new_y <0)
            ) {
            result = false;
        }
    }

    return result;
}

short move(short direction) {
    if (canMove(direction)) {
        moveForward(SPEED);
        if (isOccupied()) {
            MOVE_SPACE[POS_X][POS_Y] = OCCUPIED;
            backOff();
            reorient();
        } else {
            MOVE_SPACE[POS_X][POS_Y] = EXPLORED;
            updateCurrentPosition(CURRENT_DIRECTION);
        }
    } else {
        reorient();
    }
}

bool isOccupied() {
    return checkGround();
}


void rotateOnSpot(int direction, float wheelDistance, float wheelRadius, int angle)
{
    int wheelRotationAngle = angle * ((wheelDistance / 2) / wheelRadius);

    RotateMotorEx(BOTH_DRIVE, SPEED, wheelRotationAngle, (-direction) * 100, true, true);
}

void moveForward(long speed) {


    RotateMotorEx(BOTH_DRIVE, speed, 360, 100, false, true);
    //OnFwd(BOTH_DRIVE, speed);
}

void moveBackward(long speed) {
    moveForward(-1 * speed);
}

short backOff() {
    moveBackward(SPEED);
}

void stopMove() {
    OnFwd(BOTH_DRIVE, 0);
}

void rotate90(int direction)
{   
    RotateMotorEx(BOTH_DRIVE, SPEED, 225, -direction * 100, true, true);
}

void turnRight() {
    rotate90(DIRECTION_RIGHT);
}

void turnLeft() {
    rotate90(DIRECTION_LEFT);
}

void turnAround() {
    turnRight();
    turnRight();
}

short findNewDirection() {
    CURRENT_DIRECTION = (CURRENT_DIRECTION + 1) % 4;
}

bool checkGround() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);

    return !((abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_R)) < LIGHT_THRESHOLD) 
            && (abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_L)) < LIGHT_THRESHOLD));
}

void initGroundDetectors() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);
    
    NORMAL_GROUND_COLOR = (Sensor(GROUND_DETECTOR_R) + Sensor(GROUND_DETECTOR_L)) / 2;
}
// +++ TASKS +++

task main() {
    initMoveSpace();
    initGroundDetectors();
}

task explore() {
    Follows (main);

    while(EXPLORE) {
        exploreNextSector(CURRENT_DIRECTION);
    }
}
