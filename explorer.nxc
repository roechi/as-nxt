#include "defines.h"

#include "explorer.h"
#include "a_star_algorithm.h"


// +++ TASK FLAGS ++
bool EXPLORE = true;

// +++ METHODS ++
// +++ Initialization +++

/* 
 *  Initializes MOVE_SPACE (MAP_DIM_X x MAP_DIM_Y) with FREE ('F')
 */
void init_MoveSpace() {
    for (int x = 0; x < MAP_DIM_X; x++) {
        for (int y = 0; y < MAP_DIM_Y; y++) {
            MOVE_SPACE[x][y] = FREE;
        }
    }
}

/*
 *  Initializes current_state to given x, y and direction.
 *  If the given values are not valid, defaults are used.
 */
void init_current_state(char x, char y, char direction) {
    current_state.pos_x = (x < MAP_DIM_X) ? x : 0;
    current_state.pos_y = (y < MAP_DIM_Y) ? y : 0;
    current_state.direction = (direction >= NORTH && direction <= WEST) ? direction : NORTH;

	stack_init();
	
	// Add start position to stack
	Position tmp;
	tmp.x = current_state.pos_x;
	tmp.y = current_state.pos_y;
	
	stack_push(tmp);
}

void init_ground_detectors() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);
    
    NORMAL_GROUND_COLOR = (Sensor(GROUND_DETECTOR_R) + Sensor(GROUND_DETECTOR_L)) / 2;
}

// +++ Explorer logic +++

void doStuff() {

    if(can_move(current_state.direction))   //move in current direction
    {
        move();
    }
    else if(find_new_direction() != -1)     //reorient
    {
        reorient();
    }
    else                                    //go back
    {
        //TMP TODO: no clean solution
        Position current = stack_pop();
        Position target = stack.space[stack.last_element];
        
        //move to target
        move_to_target(current, target);
    }
}

//current and target a in neighborhood
/*
 * move robot to target. current and target should be
 * neighbours! updates current state
 */
void move_to_target(Position current, Position target)
{
    if(current.x > target.x)
    {
        turn_to_direction(current_state.direction, WEST);
    }
    else if (current.x < target.x)
    {
        turn_to_direction(current_state.direction, EAST);
    }
    else if (current.y > target.y)
    {
        turn_to_direction(current_state.direction, SOUTH);
    }
    else if(current.y < target.y)
    {
        turn_to_direction(current_state.direction, NORTH);
    }
    else
    {
        //janz blÃ¶d throw Exception;
        //current and target are equal
        return;
    }

    drive(TILE_SIZE, MOVE_FORWARD);
    current_state.pos_x = target.x;
    current_state.pos_y = target.y;

}

/*
 * turn to target direction. updated current_state
 */
void turn_to_direction(char current_direction, char target_direction)
{
    char offset = (target_direction + current_direction)  % 4;

    if(offset < 0)
    {
        for(char i = 0; i < abs(offset); ++i)
        {
            turnLeft();
        }
    }
    else if (offset > 0)
    {
        for(char i = 0; i < abs(offset); ++i)
        {
            turnRight();
        } 
    }
    else
    {
        //do nothing cause your right :)
    }
    
    current_state.direction = target_direction;
}

// /*
//  * Looks from current Position in current Direction and returns 
//  * true if move is possible.
//  */
// bool see()
// {
//     // look at my stuff, my stuff is amazing

//     bool is_move_with_current_state_possible = false;
//     if (can_move(current_state.direction)) {
//         is_move_with_current_state_possible = true;
//     }
//     return is_move_with_current_state_possible;
// }

/*
 *  Updates the current Position (int current_state) 
 *  with the given direction.
 */
void update_current_position(char direction) {
    switch (direction) {
        case NORTH: current_state.pos_y += 1;
                    break;
        case EAST:  current_state.pos_x += 1;
                    break;
        case SOUTH: current_state.pos_y += -1;
                    break;
        case WEST:  current_state.pos_x += -1;
                    break;
        default: ;
    }
}

/*
 *  Searches for new possible directions. If no new way is possible
 *  nothing happens! Otherwise direction of current_state is updated and
 *  the robot will rotate.
 *
 *  TODO: find clean solution if there is no new direction
 */
void reorient() {
    char new_direction = find_new_direction(); //-1 is possible

    while (new_direction != current_state.direction) {
        if (new_direction > current_state.direction) {
            turnRight();
            current_state.direction = (current_state.direction + 1) % 4;
        } else {
            turnLeft();
            current_state.direction = (current_state.direction - 1) % 4;
        }
    }
}

/*
 *  Returns the value of the field next to the current
 *  position into the given direction.
 */
char get_field_in_direction(char direction) {
    char pos_area_x = current_state.pos_x;
    char pos_area_y = current_state.pos_y;
    switch (direction) {
        case NORTH: pos_area_y += 1;
                    break;
        case EAST:  pos_area_x += 1;
                    break;
        case SOUTH: pos_area_y += -1;
                    break;
        case WEST:  pos_area_x += -1;
                    break;
        default: ;
    }

    char field_value;

    if (
                (pos_area_x > MAP_DIM_X - 1) ||
                (pos_area_x < 0) ||
                (pos_area_y > MAP_DIM_Y - 1) ||
                (pos_area_y <0)
            ) {
        field_value = BORDER;
    } else {
        field_value = MOVE_SPACE[pos_area_x][pos_area_y];
    }

    return field_value;
}

/*
 *  Checks wether the current position + 
 *  one step to the given direction would result in a 
 *  valid position (FREE, TARGET, EXPLORED) (true is returned), or a 
 *  blocked position (OCCUPIED, BORDER) (false is returned).
 */
bool can_move(short direction) {
    short pos_new_x = current_state.pos_x;
    short pos_new_y = current_state.pos_y;

    switch (direction) {
        case NORTH: pos_new_y += 1;
                    break;
        case EAST:  pos_new_x += 1;
                    break;
        case SOUTH: pos_new_y += -1;
                    break;
        case WEST:  pos_new_x += -1;
                    break;
        default: ;
    }

    bool result = true;

    if (
            (pos_new_x > MAP_DIM_X - 1) ||
            (pos_new_x < 0) ||
            (pos_new_y > MAP_DIM_Y - 1) ||
            (pos_new_y <0)
        ) {
        result = false;
    } else {    
        if (MOVE_SPACE[pos_new_x][pos_new_y] == OCCUPIED) {
            result = false;
        } 
    }

    return result;
}

/*
 *  Explorer-Robot moves in current direction.
 *  If the field is OCCUPIED, it will be marked (as OCCUPIED) in the MOVE_SPACE 
 *  and the the robot will go back. Reoriantation follows.
 *  If the field is FREE, the field will marked (as EXPLORED) in the MMOVE_SPACE
 *  and the robot will go to this position.
 */
void move() {
    drive(TILE_SIZE, MOVE_FORWARD);
    if (is_occupied()) {
        update_current_position(current_state.direction);
        MOVE_SPACE[current_state.pos_x][current_state.pos_y] = OCCUPIED;
        drive(TILE_SIZE, MOVE_BACKWARD);
        update_current_position((current_state.direction + 2) % 4);
    } else {
		update_current_position(current_state.direction);
		MOVE_SPACE[current_state.pos_x][current_state.pos_y] = EXPLORED;
		
		Position tmp;
		tmp.x = current_state.pos_x;
		tmp.y = current_state.pos_y;
		
		stack_push(tmp);
	}
}

/*
 *  Looks at each direction (turning right from the current direction).
 *  If a FREE field is found this direction is returned.

 *  TODO: - If no FREE field is found we are running into an error! (-1 will be returned!)
 *        - A*-Algorithm?!  
*/
char find_new_direction() {
    char newDirection = current_state.direction;
    bool found = false;
    char counter = 0;
    while (!found) {
        newDirection = (newDirection + 1) % 4;
        if (get_field_in_direction(newDirection) == FREE) {
            found = true;
        }
        // All directions checked + nothing FREE
        if(counter == 4) {
            //return Error value
            newDirection = -1;
            found = true;
        }
        ++counter;
    }
    return newDirection; 
}

/*
 *  Checks if the Ground is occupied.
 */
bool is_occupied() {
    return check_ground();
}

/*
 *  Checks if the current ground color differs from the init value.
 */
bool check_ground() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);

    return !((abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_R)) < LIGHT_THRESHOLD) 
            && (abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_L)) < LIGHT_THRESHOLD));
}

/*
 *  Rotates the robot on his position.
 *  direction = 1: right
 *  direction = -1: left
 */
void rotateOnSpot(char direction, float wheelDistance, float wheelRadius, int angle)
{
    int wheelRotationAngle = angle * ((wheelDistance / 2) / wheelRadius);

    RotateMotorEx(BOTH_DRIVE, SPEED, wheelRotationAngle, (-direction) * 100, true, true);
}


void moveForward(char speed) {
//void RotateMotorEx(byte outputs,char pwr, long angle, char turnpct, bool sync, bool stop)   
    RotateMotorEx(BOTH_DRIVE, speed, 360, 100, true, true);
    //OnFwd(BOTH_DRIVE, speed);
}

void moveBackward(char speed) {
    moveForward(-1 * speed);
}

void backOff() {
    moveBackward(SPEED);
}

void stopMove() {
    OnFwd(BOTH_DRIVE, 0);
}

void rotate90(char direction)
{   
    rotateOnSpot(direction, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
    // RotateMotorEx(BOTH_DRIVE, SPEED, 225, -direction * 100, true, true);
}

void turnRight() {
    rotateOnSpot(DIRECTION_RIGHT, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
}

void turnLeft() {
    rotateOnSpot(DIRECTION_LEFT, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
}

void turnAround() {
    turnRight();
    turnRight();
}

void drive(int distance, int direction)
{
    int wheelRotationAngle = 2 * PI * WHEEL_RADIUS * distance * direction;

    RotateMotorEx(BOTH_DRIVE, SPEED, wheelRotationAngle, 0, true, true);
}


// +++ TASKS +++

task main() {
    init_ground_detectors();
}

task explore() {
    Follows (main);
    //init movespace and position and direction of explorer-robot
    init_MoveSpace();
    init_current_state(0,0,NORTH);

    while(EXPLORE) {
        doStuff();
    }
}
