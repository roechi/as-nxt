#include "defines.h"
#include "serialize.h"
#include "map_drawing.h"
#include "a_star_algorithm.h"
#include "stack.h"

#include "movement.h"

Map map;
int round = 0;


void initMoveSpace()
{
	char tmp_arr[];
	ArrayInit(tmp_arr, 'E', MAP_DIM_X);
	ArrayInit(MOVE_SPACE, tmp_arr, MAP_DIM_Y);
}

void initTestMap() {
    //     char m[MAP_DIMATION][MAP_DIMATION] = {
    // {'C','C','C','C','C','C','C','C','C','T'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'},
    // {'C','C','C','C','C','C','C','C','C','C'}
    // };


    //    char m[MAP_DIMATION][MAP_DIMATION] = {
    // {'C','C','C','C','C','C','C','C','C','T'},
    // {'C','C','C','C','C','C','C','E','E','E'},
    // {'C','C','C','C','C','C','C','E','C','C'},
    // {'C','C','C','C','C','E','E','E','C','C'},
    // {'C','C','C','C','C','E','C','C','C','C'},
    // {'C','C','C','E','E','E','C','C','C','C'},
    // {'C','C','C','E','C','C','C','C','C','C'},
    // {'C','E','E','E','C','C','C','C','C','C'},
    // {'C','E','C','C','C','C','C','C','C','C'},
    // {'E','E','C','C','C','C','C','C','C','C'}
    // };


       char m[MAP_DIMATION][MAP_DIMATION] = {
    {'E','C','C','C','C','C','C','C','C','T'},
    {'E','C','C','C','C','E','E','E','C','E'},
    {'E','C','C','C','C','E','C','E','C','E'},
    {'E','C','C','C','C','E','C','E','E','E'},
    {'E','E','E','E','C','E','C','C','C','E'},
    {'E','C','C','E','C','E','C','C','C','E'},
    {'E','C','C','E','C','E','C','C','C','E'},
    {'E','C','C','E','E','E','C','C','C','E'},
    {'E','C','C','C','C','C','C','C','C','E'},
    {'E','C','C','C','C','C','C','C','C','E'}
    };

//MOVE_SPACE = m;
}

void receiveMap() {

    int cs;
    int RECEIVING_MAILBOX = MAILBOX1;

    bool header_read = false;
    bool read = true;
    string data = "";
    while (read)
    {
        NumOut(0, 40, BluetoothStatus(CONN_BT0));
        NumOut(0, 50, NO_ERR);
        string in;
        if (ReceiveRemoteString(RECEIVING_MAILBOX, true, in) == NO_ERR)
        {
            TextOut (0, 0, in);
            if (in == "FIN") {
                  read = false;
            }

            if (header_read && read) {
                string temp = StrCat(data, in);
                data = temp;
            }

            if (SubStr(in, 0, 1) == "#" && !header_read) {
              int x_dim;
              int y_dim;
              parseHeader(in, x_dim, y_dim, cs);

              

              //map.x_dim = x_dim;
              //map.y_dim = y_dim;

              //char m[map.x_dim][map.y_dim];
              
              
              //map.data = m;
              header_read = true;
            }

            SendResponseBool(RECEIVING_MAILBOX, true);
            Wait(1000);
        }
    }
    NumOut(0, 30, 0);
    Wait(1000);
    deserialize(data, MAP_DIM_X, MAP_DIM_Y, MOVE_SPACE);
    ClearScreen();
    drawMap(MOVE_SPACE, MAP_DIM_X, MAP_DIM_Y);
    Wait(2000);
}

void drawStats(Position t) {
     TextOut(0, LCD_LINE1, "loc x:");
     NumOut(35, LCD_LINE1, current_state.pos_y);
     TextOut(0, LCD_LINE2, "loc y:");
     NumOut(35, LCD_LINE2, current_state.pos_y);
     TextOut(0, LCD_LINE3, "tar x:");
     NumOut(35, LCD_LINE3, t.x);
     TextOut(0, LCD_LINE4, "tar y:");
     NumOut(35, LCD_LINE4, t.y);
     TextOut(0, LCD_LINE5, "direc:");
     NumOut(35, LCD_LINE5, current_state.direction);
     TextOut(0, LCD_LINE6, "round:");
     NumOut(35, LCD_LINE6, round);
}

void draw(Position t) {
     ClearScreen();
     drawMap(MOVE_SPACE, MAP_DIM_X, MAP_DIM_Y);
     drawStats(t);
}

void init() {
	initMoveSpace();

    current_state.pos_x = 0;
    current_state.pos_y = 0;
    current_state.direction = NORTH;
    initTestMap();
}

A_Star_Position find_target_position() {
    A_Star_Position target;
    for (int i = 0; i < MAP_DIM_X; i++) {
         for (int j = 0; j < MAP_DIM_Y; j++) {
            if (MOVE_SPACE[i][j] == TARGET) {
                target.x = i;
                target.y = j;
                i = MAP_DIM_X;
                j = MAP_DIM_Y;
            }
         }
     }
     return target;
}

bool checkForDone() {
    bool done = false;
    if (map.data[current_state.pos_x][current_state.pos_y] == TARGET &&
        a_star_start_at == 0) {
        done = true;
    }
    return done;
}

void goToTarget() {
     A_Star_Position startPos;
     startPos.x = 0;
     startPos.y = 0;
     A_Star_Position target = find_target_position();
     a_star_calculate_path(startPos, target, MOVE_SPACE, MAP_DIM_X, MAP_DIM_Y);

	 // Bis hier gehts
	 
     bool go = true;
	 
	 unsigned int a_star_iter = a_star_start_at;
     while(go) {
          A_Star_Node node = a_star_reversed_path[a_star_iter--];
          Position t; 
          t.x = node.pos.x;
          t.y = node.pos.y;

          Position p; 
          p.x = current_state.pos_x;
          p.y = current_state.pos_y;
          
          draw(t);
          move_to_target(p,t);

          MOVE_SPACE[t.x][t.y] = '0';

          go = !checkForDone();
          round = round + 1;
		  
		  if (a_star_iter == 0)
			break;
     }
}

task main ()
{
    init();
    string in, out;
    bool read = true;
    int line = 0;
    SendResponseBool(MAILBOX1, true);
    receiveMap();
    goToTarget();

    Wait(10000);
}
