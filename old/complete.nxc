struct Current_State {
	char pos_x;
	char pos_y;
	char direction;
};

// +++ ROBOT CONSTANTS ***
#define RIGHT OUT_C
#define LEFT OUT_B
#define BOTH_DRIVE OUT_BC
#define NECK OUT_A
#define GROUND_DETECTOR_L IN_2
#define GROUND_DETECTOR_R IN_3
#define TOUCH IN_1
#define ULTRA IN_4
#define DIRECTION_RIGHT 1
#define DIRECTION_LEFT -1
#define DIRECTION_BACK 0
#define NECK_ROT_SPEED 50
#define SPEED 75
#define MAX_US_DISTANCE 25
#define LIGHT_THRESHOLD 15
#define WHEEL_RADIUS 2.8
#define WHEEL_DISTANCE 14
#define TILE_SIZE 30

// +++ NAVIGATION +++
// Dimensions
const char MAP_DIMENSION = 3;
const char MAP_DIM_X = 3;
const char MAP_DIM_Y = 3;
// Directions
const char NORTH = 0;
const char EAST = 1;
const char SOUTH = 2;
const char WEST = 3;
// Field-specifier
const char FREE = 'F';
const char OCCUPIED = 'C';
const char TARGET = 'T';
const char EXPLORED = 'E';
const char BORDER = 'B';

// +++ VARIABLES +++
// field
char MOVE_SPACE[MAP_DIM_X][MAP_DIM_Y];
// current state of explorer
Current_State current_state;
// normal ground color
int NORMAL_GROUND_COLOR = 0;





// Initialization
void init_MoveSpace();
void init_current_state(char x, char y, char direction);
void init_ground_detectors();

void doStuff();
bool see();

void update_current_position(char direction);
void reorient();
char get_field_in_direction(char direction);
bool can_move(short direction);
void move();
char find_new_direction();
bool is_occupied();
bool check_ground();

// Movement
void rotateOnSpot(char direction, float wheelDistance, float wheelRadius, int angle);
void moveForward(char speed);
void moveBackward(char speed);
void backOff();
void stopMove();
void rotate90(char direction);
void turnRight();
void turnLeft();
void turnAround();
void drive(int distance, int direction);


struct A_Star_Position
{
	char x;							// max 127
	char y;							// max 127
};

struct A_Star_Node
{
	A_Star_Position pos;
	short distance;		// max 65K
	unsigned char previous_node;	// max 255
	unsigned char id;
};

void a_star_calculate_path(A_Star_Position a_star_start, A_Star_Position a_star_target);

unsigned char a_star_get_new_id();

short a_star_is_in_open_list(A_Star_Node node);
short a_star_is_in_closed_list(A_Star_Node node);
bool a_star_add_to_open_list(A_Star_Node node);
bool a_star_add_to_closed_list(A_Star_Node node);
bool a_star_delete_from_open_list(A_Star_Node node);
bool a_star_delete_from_closed_list(A_Star_Node node);
unsigned char a_star_count_open_list_elements();
unsigned char a_star_count_closed_list_elements();
void a_star_clear_lists();
short a_star_get_open_list_index_by_id(unsigned char id);
short a_star_get_closed_list_index_by_id(unsigned char id);

bool a_star_compare_positions(A_Star_Position lhs, A_Star_Position rhs);
bool a_star_is_valid_position(A_Star_Position position);
bool a_star_is_position_accessible(A_Star_Position position);

A_Star_Node a_star_get_node_with_minimum_distance();
void a_star_set_nearbours_to_open_list(A_Star_Node current_node);

void a_star_build_path(A_Star_Node a_star_target);


#define A_STAR_SIZE_X 3
#define A_STAR_SIZE_Y 3
#define A_STAR_NEARBOURS 4

unsigned char a_star_last_id;

#define A_STAR_LIST_SIZE 127
A_Star_Node a_star_open_list[A_STAR_LIST_SIZE];
A_Star_Node a_star_closed_list[A_STAR_LIST_SIZE];
A_Star_Node a_star_reversed_path[A_STAR_LIST_SIZE];


void a_star_calculate_path(A_Star_Position a_star_start, A_Star_Position a_star_target)
{
	a_star_last_id = 1;

	A_Star_Node start_node;
	start_node.pos = a_star_start;
	start_node.distance = 0;
	start_node.previous_node = 0;
	start_node.id = a_star_get_new_id();
	
	a_star_clear_lists();
	a_star_add_to_open_list(start_node);
	
	while (a_star_count_open_list_elements() > 0)
	{
		A_Star_Node current = a_star_get_node_with_minimum_distance();
		
		if (a_star_compare_positions(current.pos, a_star_target))
		{
			a_star_build_path(current);
			break;
		}
		
		a_star_delete_from_open_list(current);
		a_star_add_to_closed_list(current);
		
		a_star_set_nearbours_to_open_list(current);
	}
}

unsigned char a_star_get_new_id()
{
	return a_star_last_id++;
}

short a_star_is_in_open_list(A_Star_Node node)
{
	short index = -1;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && index == -1; ++i)
	{
		if (a_star_compare_positions(a_star_open_list[i].pos, node.pos))
			index = i;
	}

	return index;
}

short a_star_is_in_closed_list(A_Star_Node node)
{
	short index = -1;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && index == -1; ++i)
	{
		if (a_star_compare_positions(a_star_closed_list[i].pos, node.pos))
			index = i;
	}

	return index;
}

bool a_star_add_to_open_list(A_Star_Node node)
{
	bool is_set = false;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && !is_set; ++i)
	{
		if (!a_star_is_valid_position(a_star_open_list[i].pos))
		{
			a_star_open_list[i] = node;
			is_set = true;
		}
	}

	return is_set;
}

bool a_star_add_to_closed_list(A_Star_Node node)
{
	bool is_set = false;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && !is_set; ++i)
	{
		if (!a_star_is_valid_position(a_star_closed_list[i].pos))
		{
			a_star_open_list[i] = node;
			is_set = true;
		}
	}

	return is_set;
}

bool a_star_delete_from_open_list(A_Star_Node node)
{
	short index = a_star_is_in_open_list(node);
	
	if (index != -1)
	{
		a_star_open_list[index].pos.x = -1;
		a_star_open_list[index].pos.y = -1;
		a_star_open_list[index].distance = 0;
		a_star_open_list[index].previous_node = 0;
	
		return true;
	}
	else
	{
		return false;
	}
}

bool a_star_delete_from_closed_list(A_Star_Node node)
{
	short index = a_star_is_in_closed_list(node);
	
	if (index != -1)
	{
		a_star_closed_list[index].pos.x = -1;
		a_star_closed_list[index].pos.y = -1;
		a_star_closed_list[index].distance = 0;
		a_star_closed_list[index].previous_node = 0;
	
		return true;
	}
	else
	{
		return false;
	}
}

unsigned char a_star_count_open_list_elements()
{
	unsigned char counter = 0;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE; ++i)
	{
		if (a_star_is_valid_position(a_star_open_list[i].pos))
			++counter;
	}

	return counter;
}

unsigned char a_star_count_closed_list_elements()
{
	unsigned char counter = 0;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE; ++i)
	{
		if (a_star_is_valid_position(a_star_closed_list[i].pos))
			++counter;
	}

	return counter;
}

void a_star_clear_lists()
{
	A_Star_Node default_node;
	default_node.pos.x = -1;
	default_node.pos.y = -1;
	default_node.distance = 0;
	default_node.previous_node = 0;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE; ++i)
	{
		a_star_open_list[i] = default_node;
		a_star_closed_list[i] = default_node;
	}
}

short a_star_get_open_list_index_by_id(unsigned char id)
{
	short index = -1;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && index == -1; ++i)
	{
		if (a_star_open_list[i].id == id)
			index = i;
	}
	
	return index;
}

short a_star_get_closed_list_index_by_id(unsigned char id)
{
	short index = -1;
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE && index == -1; ++i)
	{
		if (a_star_closed_list[i].id == id)
			index = i;
	}
	
	return index;
}

bool a_star_compare_positions(A_Star_Position lhs, A_Star_Position rhs)
{
	return lhs.x == rhs.x && lhs.y == rhs.y;
}

bool a_star_is_valid_position(A_Star_Position position)
{
	return position.x != -1 && position.y != -1 &&
		   position.x < A_STAR_SIZE_X && position.y < A_STAR_SIZE_Y;
}

bool a_star_is_position_accessible(A_Star_Position position)
{
	if (!a_star_is_valid_position(position))
		return false;
	else
	{
		char field_value = MOVE_SPACE[position.x][position.y];
		
		if (field_value == EXPLORED || field_value == TARGET)
			return true;
		else
			return false;
	}
}


A_Star_Node a_star_get_node_with_minimum_distance()
{
	short index = -1;
	unsigned short min_distance = -1;	// Max unsigned short
	
	
	for (unsigned char i = 0; i < A_STAR_LIST_SIZE; ++i)
	{
		if (a_star_is_valid_position(a_star_open_list[i].pos))
		{
			if (min_distance > a_star_open_list[i].distance)
			{
				min_distance = a_star_open_list[i].distance;
				index = i;
			}
		}
	}

	if (index == -1)
	{
		A_Star_Node invalid_node;
		invalid_node.pos.x = -1;
		invalid_node.pos.y = -1;
		
		return invalid_node;
	}
	else
	{
		return a_star_open_list[index];
	}
}

void a_star_set_nearbours_to_open_list(A_Star_Node current_node)
{
	if (A_STAR_NEARBOURS == 4)
	{
		char offsets[] = { 0, -1, -1, 0, 1, 0, 0, -1 };
		
		for (unsigned char i = 0; i < 8; i += 2)
		{
			A_Star_Node tmp_node;
			tmp_node.pos.x = current_node.pos.x + offsets[i];
			tmp_node.pos.y = current_node.pos.y + offsets[i + 1];
			
			if (!a_star_is_valid_position(tmp_node.pos))	// Position nicht valide (Ausserhalb der Karte)
				continue;
				
			if (!a_star_is_position_accessible(tmp_node.pos))
				continue;
			
			if (a_star_is_in_closed_list(tmp_node))		// In closed List vorhanden
				continue;
			
			tmp_node.distance = current_node.distance + 1;
			short index_in_open_list = a_star_is_in_open_list(tmp_node);
			if (index_in_open_list == -1)		// Nicht in Open List vorhanden
			{
				tmp_node.id = a_star_get_new_id();
				tmp_node.previous_node = current_node.id;
				a_star_add_to_open_list(tmp_node);
			}
			else if (a_star_open_list[index_in_open_list].distance > tmp_node.distance) // Besserer Weg gefunden
			{
				a_star_open_list[index_in_open_list].distance = tmp_node.distance;
				a_star_open_list[index_in_open_list].previous_node = current_node.id;
			}
		}
	}
	else
	{
		// NOT IMPLEMENTED
	}
}

void a_star_build_path(A_Star_Node a_star_target)
{
	unsigned char index = 0;
	A_Star_Node current_node = a_star_target;
	a_star_reversed_path[index++] = current_node;
	
	while (current_node.previous_node != 0)
	{
		current_node = a_star_get_closed_list_index_by_id(current_node.previous_node);
		a_star_reversed_path[index++] = current_node;
	}
	
	for (unsigned char i = index; i < A_STAR_LIST_SIZE; ++i)
	{
		a_star_reversed_path[i].id = 0;
	}
}



// +++ TASK FLAGS ++
bool EXPLORE = true;

// +++ METHODS ++
// +++ Initialization +++

/* 
 *  Initializes MOVE_SPACE (MAP_DIM_X x MAP_DIM_Y) with FREE ('F')
 */
void init_MoveSpace() {
    for (int x = 0; x < MAP_DIM_X; x++) {
        for (int y = 0; y < MAP_DIM_Y; y++) {
            MOVE_SPACE[x][y] = FREE;
        }
    }
}

/*
 *  Initializes current_state to given x, y and direction.
 *  If the given values are not valid, defaults are used.
 */
void init_current_state(char x, char y, char direction) {
    current_state.pos_x = (x < MAP_DIM_X) ? x : 0;
    current_state.pos_y = (y < MAP_DIM_Y) ? y : 0;
    current_state.direction = (direction >= NORTH && direction <= WEST) ? direction : NORTH;
}

void init_ground_detectors() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);
    
    NORMAL_GROUND_COLOR = (Sensor(GROUND_DETECTOR_R) + Sensor(GROUND_DETECTOR_L)) / 2;
}

// +++ Explorer logic +++

void doStuff() {

    // maybe use see method and dicide what to do...in move
    bool current_state_move_possible = see();
    if(current_state_move_possible) {
        move();
    } else {
        reorient();
    }
}

/*
 * Looks from current Position in current Direction and returns 
 * true if move is possible.
 */
bool see()
{
    // look at my stuff, my stuff is amazing

    bool is_move_with_current_state_possible = false;
    if (can_move(current_state.direction)) {
        is_move_with_current_state_possible = true;
    }
    return is_move_with_current_state_possible;
}

/*
 *  Updates the current Position (int current_state) 
 *  with the given direction.
 */
void update_current_position(char direction) {
    switch (direction) {
        case NORTH: current_state.pos_y += 1;
                    break;
        case EAST:  current_state.pos_x += 1;
                    break;
        case SOUTH: current_state.pos_y += -1;
                    break;
        case WEST:  current_state.pos_x += -1;
                    break;
        default: ;
    }
}

/*
 *  Searches for new possible directions. If no new way is possible
 *  nothing happens! Otherwise direction of current_state is updated and
 *  the robot will rotate.
 *
 *  TODO: find clean solution if there is no new direction
 */
void reorient() {
    char new_direction = find_new_direction(); //-1 is possible
    //TMP TODO: no clean solution
    if(new_direction == -1)
        return;

    while (new_direction != current_state.direction) {
        if (new_direction > current_state.direction) {
            turnRight();
            current_state.direction = (current_state.direction + 1) % 4;
        } else {
            turnLeft();
            current_state.direction = (current_state.direction - 1) % 4;
        }
    }
}

/*
 *  Returns the value of the field next to the current
 *  position into the given direction.
 */
char get_field_in_direction(char direction) {
    char pos_area_x = current_state.pos_x;
    char pos_area_y = current_state.pos_y;
    switch (direction) {
        case NORTH: pos_area_y += 1;
                    break;
        case EAST:  pos_area_x += 1;
                    break;
        case SOUTH: pos_area_y += -1;
                    break;
        case WEST:  pos_area_x += -1;
                    break;
        default: ;
    }

    char field_value;

    if (
                (pos_area_x > MAP_DIM_X - 1) ||
                (pos_area_x < 0) ||
                (pos_area_y > MAP_DIM_Y - 1) ||
                (pos_area_y <0)
            ) {
        field_value = BORDER;
    } else {
        field_value = MOVE_SPACE[pos_area_x][pos_area_y];
    }

    return field_value;
}

/*
 *  Checks wether the current position + 
 *  one step to the given direction would result in a 
 *  valid position (FREE, TARGET, EXPLORED) (true is returned), or a 
 *  blocked position (OCCUPIED, BORDER) (false is returned).
 */
bool can_move(short direction) {
    short pos_new_x = current_state.pos_x;
    short pos_new_y = current_state.pos_y;

    switch (direction) {
        case NORTH: pos_new_y += 1;
                    break;
        case EAST:  pos_new_x += 1;
                    break;
        case SOUTH: pos_new_y += -1;
                    break;
        case WEST:  pos_new_x += -1;
                    break;
        default: ;
    }

    bool result = true;

    if (
            (pos_new_x > MAP_DIMENSION - 1) ||
            (pos_new_x < 0) ||
            (pos_new_y > MAP_DIMENSION - 1) ||
            (pos_new_y <0)
        ) {
        result = false;
    } else {    
        if (MOVE_SPACE[pos_new_x][pos_new_y] == OCCUPIED) {
            result = false;
        } 
    }

    return result;
}

/*
 *  Explorer-Robot moves in current direction.
 *  If the field is OCCUPIED, it will be marked (as OCCUPIED) in the MOVE_SPACE 
 *  and the the robot will go back. Reoriantation follows.
 *  If the field is FREE, the field will marked (as EXPLORED) in the MMOVE_SPACE
 *  and the robot will go to this position.
 */
void move() {
    drive(TILE_SIZE, 1);
    if (is_occupied()) {
        update_current_position(current_state.direction);
        MOVE_SPACE[current_state.pos_x][current_state.pos_y] = OCCUPIED;
        drive(TILE_SIZE, -1);
        update_current_position((current_state.direction + 2) % 4);
    } else {
		update_current_position(current_state.direction);
		MOVE_SPACE[current_state.pos_x][current_state.pos_y] = EXPLORED;
	}
}

/*
 *  Looks at each direction (turning right from the current direction).
 *  If a FREE field is found this direction is returned.

 *  TODO: - If no FREE field is found we are running into an error! (-1 will be returned!)
 *        - A*-Algorithm?!  
*/
char find_new_direction() {
    char newDirection = current_state.direction;
    bool found = false;
    char counter = 0;
    while (!found) {
        newDirection = (newDirection + 1) % 4;
        if (get_field_in_direction(newDirection) == FREE) {
            found = true;
        }
        // All directions checked + nothing FREE
        if(counter == 4) {
            //return Error value
            newDirection = -1;
            found = true;
        }
        ++counter;
    }
    return newDirection; 
}

/*
 *  Checks if the Ground is occupied.
 */
bool is_occupied() {
    return check_ground();
}

/*
 *  Checks if the current ground color differs from the init value.
 */
bool check_ground() {
    SetSensorLight(GROUND_DETECTOR_R);
    SetSensorLight(GROUND_DETECTOR_L);

    return !((abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_R)) < LIGHT_THRESHOLD) 
            && (abs(NORMAL_GROUND_COLOR - Sensor(GROUND_DETECTOR_L)) < LIGHT_THRESHOLD));
}

/*
 *  Rotates the robot on his position.
 *  direction = 1: right
 *  direction = -1: left
 */
void rotateOnSpot(char direction, float wheelDistance, float wheelRadius, int angle)
{
    int wheelRotationAngle = angle * ((wheelDistance / 2) / wheelRadius);

    RotateMotorEx(BOTH_DRIVE, SPEED, wheelRotationAngle, (-direction) * 100, true, true);
}


void moveForward(char speed) {
//void RotateMotorEx(byte outputs,char pwr, long angle, char turnpct, bool sync, bool stop)   
    RotateMotorEx(BOTH_DRIVE, speed, 360, 100, true, true);
    //OnFwd(BOTH_DRIVE, speed);
}

void moveBackward(char speed) {
    moveForward(-1 * speed);
}

void backOff() {
    moveBackward(SPEED);
}

void stopMove() {
    OnFwd(BOTH_DRIVE, 0);
}

void rotate90(char direction)
{   
    rotateOnSpot(direction, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
    // RotateMotorEx(BOTH_DRIVE, SPEED, 225, -direction * 100, true, true);
}

void turnRight() {
    rotateOnSpot(DIRECTION_RIGHT, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
}

void turnLeft() {
    rotateOnSpot(DIRECTION_LEFT, WHEEL_DISTANCE, WHEEL_RADIUS, 90);
}

void turnAround() {
    turnRight();
    turnRight();
}

void drive(int distance, int direction)
{
    int wheelRotationAngle = 2 * PI * WHEEL_RADIUS * distance * direction;

    RotateMotorEx(BOTH_DRIVE, SPEED, wheelRotationAngle, 0, true, true);
}


// +++ TASKS +++

task main() {
    init_ground_detectors();
}

task explore() {
    Follows (main);
    //init movespace and position and direction of explorer-robot
    init_MoveSpace();
    init_current_state(0,0,NORTH);

    while(EXPLORE) {
        doStuff();
    }
}

