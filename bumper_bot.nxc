#define RIGHT OUT_C
#define LEFT OUT_B
#define BOTH_DRIVE OUT_BC
#define NECK OUT_A
#define GROUND_DETECTOR_L IN_2
#define GROUND_DETECTOR_R IN_3
#define TOUCH IN_1
#define ULTRA IN_4
#define DIRECTION_RIGHT 1
#define DIRECTION_LEFT -1
#define DIRECTION_BACK 0
#define NECK_ROT_SPEED 50
#define SPEED 50

bool drive = true;
bool ultra = true;
bool touch = true;

mutex drive_motors;
mutex neck_motor;

void moveForward(long speed) {
    OnFwd(BOTH_DRIVE, speed);
}

void moveBackward(long speed) {
    moveForward(-1 * speed);
}

void stopMove() {
    OnFwd(BOTH_DRIVE, 0);
}

void rotate90(int direction)
{	
	RotateMotorEx(BOTH_DRIVE, SPEED, 225, -direction * 100, true, true);
}

void turnRight() {
    rotate90(DIRECTION_RIGHT);
}

void turnLeft() {
    rotate90(DIRECTION_LEFT);
}

void turnAround() {
    turnRight();
    turnRight();
}

void look(int direction, int degrees) {
    RotateMotor(NECK, NECK_ROT_SPEED * direction, degrees);    
}

int lookRightAndGetDistance() {

    look(DIRECTION_RIGHT, 90);

    SetSensorLowspeed(ULTRA);
    int distance = SensorUS(ULTRA);
    
    look(DIRECTION_LEFT, 90);

    return distance;
}

int lookLeftAndGetDistance() {

    look(DIRECTION_LEFT, 90);

    SetSensorLowspeed(ULTRA);
    int distance = SensorUS(ULTRA);
    
    look(DIRECTION_RIGHT, 90);

    return distance;
}

int getRandomLeftOrRight() {

    int direction = 0;

    if ((RandomNumber % 2) == 0) {
            direction = DIRECTION_RIGHT;
        } else {
            direction = DIRECTION_LEFT;
        }

        return direction;
}

int getFreeDirection(int toCloseThreshold) {
    int rightDistance = lookRightAndGetDistance();
    int leftDistance = lookLeftAndGetDistance();

    int optimalDirection = 0;

    if (rightDistance >= toCloseThreshold && rightDistance > leftDistance) {
        optimalDirection = DIRECTION_RIGHT;
    } else if (leftDistance >= toCloseThreshold && leftDistance > rightDistance) {
        optimalDirection = DIRECTION_LEFT;
    } else if (leftDistance == rightDistance && leftDistance >= toCloseThreshold) {
        optimalDirection = getRandomLeftOrRight();
    } else {
        optimalDirection = DIRECTION_BACK;
    }

    return optimalDirection;
}

void lookForNewDirection()
{	
	stopMove();
	
	Acquire(neck_motor);

	int direction = getFreeDirection(10);

	if (direction == DIRECTION_LEFT) {
		rotate90(DIRECTION_LEFT);
	} else if (direction == DIRECTION_RIGHT) {
		rotate90(DIRECTION_RIGHT);
	} else {
		turnAround();
	}

	Release(neck_motor);
}

task main() {
    
}

task keepMoving() {

    Follows(main);

    while(drive) {
    Acquire(drive_motors);

    moveForward(SPEED);

    Release(drive_motors);
    }
}

task reactOnTouch() {
    Follows (main);
    SetSensorTouch(TOUCH);
	SetSensorLight(GROUND_DETECTOR_R);
	SetSensorLight(GROUND_DETECTOR_L);
	
	int lightValueR = Sensor(GROUND_DETECTOR_R);
	int lightValueL = Sensor(GROUND_DETECTOR_L);
    bool continue = false;

    while (touch)
    {

        continue = !Sensor(TOUCH) 
            && !(abs(lightValueR - Sensor(GROUND_DETECTOR_R)) > 20) 
            && !(abs(lightValueL - Sensor(GROUND_DETECTOR_L)) > 20);

        while(continue)
        {
            ;
        }
        
        Acquire(drive_motors);

        stopMove();
        Wait(400);
        moveBackward(SPEED);
        Wait(400);
        stopMove();
		
		lookForNewDirection();
		Release(drive_motors);
    }
}

task reactUltra() {
    short ultraDistance = 0;
    short toCloseThreshold = 10;
   
    Follows(main);
  
    SetSensorLowspeed(ULTRA);
    while (ultra)
    {
        ultraDistance = SensorUS(ULTRA);
      
        if (ultraDistance <= toCloseThreshold)
        {
			Acquire(drive_motors);
            lookForNewDirection();
			Release(drive_motors);
            ultraDistance = INT_MAX;
        }
    }
}
